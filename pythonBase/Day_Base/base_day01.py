#注释：对代码的说明，给人看的，不被计算机执行
#注释快捷键 ctrl+/
#输入输出函数
#注意: 1.代码中所有符号要英文状态
#     2. python 代码有缩进格式,一般情况顶格写,有逻辑层次才缩进,缩进的单位是Tab
#input("提示内容") #输入函数
#print(值1,值2,...,sep="间隔符号",end="结束内容”) #输出函数
#默认时:以为空格间隔输出; end是输出完指定值后函数再次输出的内容，完默认为回车换行,
#\n 表示换行符

#user_name=input("请输入用户名")
#print("你刚才输入的用户名是",user_name)
print("a","b","c",sep="|",end="我完成了。")
print("d","e")

# 练习(两个输入一个输出)
# 1.提示输入用户名
# 2.提示输入密码
# 3.把用户名密码打印出来 格式为 "你的用户名是：xxxx, 你的密码是 xxxx";
# user_name = input("请输入用户名")
# user_password = input("请输入密码")
# print("你的用户名是:",user_name,"  你的密码是:",user_password,sep="")

#赋值: 值是需要进行数学运算的不加引号,其它均要加引号(单引号双引号都可以),加了引号后叫字符串.
#方法1: 变量名 = 值
bianliang1 = 100
bianlaing2 = "gu"
#方法2： 变量名1,变量名2,..=值1,值2,..  把值赋给对应位置的变量,变量名的数量与值的数量一致
a,b=1,10
print(a,b)
#方法3 变量名1=变量名2=变量名.. = 值
c=d=e=18
print(c,d,e)

# 变量名命名规则
# 1. 区分大小写
# 2. 变量名内可包含 数字,下划线,字母,但是不能以数字开头
# 3. 不能是关键字(python的函数名,if 等)
# 经验规则
# 小驼峰命名: userName 第一个单词的首字母小写其它的首字母大写
# 大驼峰命名: UserName 每个单词的首字母大写
# 匈牙利命名: user_name 每个单词用下划线分隔
#
# 数据类型:数据类型是计算机内部记录数据的方式和方法，数据采用不同的格式来存储
# python 数据类型分类
# 1. 字符串
# 2. 数值
# 3. 容器
# 1.字符串(文字,文本) 关键字是 str
# 表达方式: 单引号 双引号  三个单引号或三个双引号(保留赋值时的格式)
str1 = '第一个字符串,包含""'
str2 = "第二个字符串,包含''"
str3 = """第三个 
字符串 
包含换行"""
print(str1,str2)
print(str3)
#转义字符,转义符号\,作用:放到一个字符前,使其字符失去特殊意义,只能作为一个普通字符
str4= '我是一个\''
str5= "我是一个'"
print(str4,str5)

#字符串运算: 拼接(+) ,重复(*), 长度(len:字符长度)
str6= "a" + 'b'  #ab
str7= "ab" * 3   #ababab
print(str6,str7)
print(len("abc"),len("字符串"))

#字符串访问:
#1.索引(位置)访问(单个字符访问) 从0开始
str8="abcdef"
print(str8[2]) #c
print(str8[len(str8)-1]) #提取最后一个f
#2.切片(范围访问范围)
# [开始索引]:[结束索引]:[步长]
# 开始索引 默认值为0   结束索引 默认值为最后 步长 默认值为1
# 开始索引:结束索引 此范围是左闭右开(包含开始不包含结束)
# 可从后向前标位置: 开始索引 -1, 步长可负数(从右向左递进),
# 内容: A   B  C  D  E
# 位置: 0   1  2  3  4  #从左侧开始
# 位置  -5 -4 -3 -2 -1  #从右侧开始
str8="abcdef"
print(str8[0:3:1]) #abc
print(str8[:3]) #abc 开始索引 默认值为0 步长 默认值为1
# str8中得到ace
str8="abcdef"
print(str8[0:6:2])
print(str8[::2])
# str8中得到edc
str8="abcdef"
print(str8[-2:-5:-1])
print(str8[4:1:-1])
# str8中内容倒置 abcdef-->fedcba
str8="abcdef"
print(str8[::-1])
print(str8[-1::-1])

s = 'ABCDE'
print(s[1:]) #BCDE
print(s[-2:]) #DE
print(s[1:4]) #BCD
print(s[:]) #ABCDE
print(s[:2]) #AB
print(s[1:1]) #空空如也
print(s[4:2]) #空
print(s[::]) #ABCDE
print(s[::2]) #ACE
print(s[2::2]) #CE
print(s[-1::-2]) #ECA
print(s[::-1])#EDCBA

# 字符串的格式化:组合成一个大字符串(拼接,format,占位符)
name = "gu"
age = 18
#数据分析gu老师永远18
#1. 拼接
hua = "数据分析" + name +"老师永远" + str(age) #str()把数值转化为字符串
print(hua)
#2. format
geshi = "数据分析{}老师永远{}" #填空题,用{} 表示空位
print(geshi.format(name,age))
print("测试小数{:.2f}".format(3.146789)) #:.nf 四舍五入保留n位小数点
#3. 占位符
geshi2 = "数据分析%s老师永远%d" #占比符 %s字符串,%d整数 %f小数 .
print(geshi2 % (name,age))
print("测试小数%.2f" % 3.146789) #%.nf 四舍五入保留n位小数点

# 括号的使用:
# 1.任何函数或方法都用() ,input,print,format,str
# 2.字符串或容器类型数据访问用[], 无论是索引或切片,列表的符号也是[]
# 3.字符串.format(格式)用{},  格式空位时使用

# 字符串的常用方法(函数):对字符串的操作
# s="abcabcdef"
# 分别语法:
# 字符串.count(子字符串) #子字符串在字符串中出现的次数
# 字符串.count(子字符串,开始位置) #子字符串在字符串中开始位置以后出现的次数
# 字符串.count(子字符串,开始位置,结束位置) #子字符串在指定位置范围内出现的次数
# 综合语法: 字符串.count(子字符串,[开始位置[,结束位置]])
print(s.count("a"))
s.count("a",2)
s.count("a",4,6)
#s中a的个数
s.count("a",2)

# 字符串.strip([字符]) #把字符串前后的指定字符去掉,默认空格
# 字符串.lstrip([字符]) #把字符串前的指定字符去掉,默认空格
# 字符串.rstrip([字符]) #把字符串后的指定字符去掉,默认空格
print(" abc ".strip()) #abc,#默认把首尾空格去掉
print("12abc21".strip("12")) #abc 把首尾1和2都去掉
#
# 字符串.replace(要替换掉的内,要替换成的内容) #替换所有
# 字符串.replace(要替换掉的内,要替换成的内容[,替换n个]) #替换找到的前n个
print("12abc12".replace("b","XX")) #12aXXc12  b替换成XX
print("12abc121".replace("1","XX",2)) #XX2abcXX21  把前两个1替换成XX
#
# 字符串.find(子字符串) #找子字符串在字符串中第一次出现的位置
# 字符串.find(子字符串,开始位置) #找子字符串在字符串开始位置后第一次出现的位置
# 字符串.find(子字符串,开始位置,结束位置) #找子字符串在字符串指定范围第一次出现的位置
# 找不到返回-1.
# 字符串.index 用法与作用同find,找不到子字符串时报错.
print("12abc12".find("e")) #1
print("12abc12".find("2",3))

# 练习
#1.定义变量 str1 值为 "floccinaucinihilipilification"
str1="floccinaucinihilipilification"
#2.str1字符串中c出现的次数
print(str1.count("c"))
#3.str1中第二个c所在的位置(从第一个c位置+1往后找)
print(str1.find("c",str1.find("c")+1))
#4.提取出第一个i及附近附近的5个字符(第一个i的前两个,i,后两个字符)
i_index=str1.find("i") #第一个i的位置
print(str1[i_index-2:i_index+3]) #+3是因为切片时不包含结束位置
#5.替换掉str1 中的所有i
print(str1.replace("i",""))

# 数值类型
# 1. 整数 关键字 int
# a=10
# b=15
# c=-1
# 2. 小数  关键字 float
# a=3.14
# b=175.5
# 3. 布尔  第一个字母大写 关键字 bool
# a=True #真
# b=False  #假
# 算术运算符: 四则运算 + - * /  特殊: 整除 //  取余(余数) %  幂运算 **
# print(10 // 3, 10 % 3,10 **2)
#
# 类型转换:直接用关键字作为函数, bool(值):只有值为0时,结果为False
# print(str(12),int("12"),int(3.14),float(3),bool(10),bool(0))
#
# 练习
# 写程序，输入一个字符串， 打印字符串的如下内容
# 1. 打印这个字符串的第一个字符
# 2. 打印这个字符串的最后一个字符
# 3. 如果这个字符串的长度是 奇数，则打印中间这个字符
#
# str1 = input("请输入一个字符串")
# print(str1,str1[0],str1[len(str1)-1],str1[-1])
# print(str1[len(str1)//2:len(str1)//2 + len(str1)%2])
#
# str1="abc12"
# str1[2:3] #5//2=2 5%2=1   5//2:5//2+5%2  2:3
# str1="abc123"
# str1[3:3] #6//2=3 6%2=0   6//2:6//2+6%2  3:3
#
#
# 复习:
# 1. 输入输出函数
#     输入函数:input("提示内容")
#     输出函数:print(值1,值2,...,sep="间隔符号",end="结束内容”)
# 2.赋值:
#    方法1: 变量名 = 值
#    方法2: 变量名1,变量名2,..=值1,值2,..
#    方法3: 变量名1=变量名2=..=值
# 3.变量名(标识符)命名规则
#     1. 区分大小写
#     2. 变量名内可包含 数字,下划线,字母,但是不能以数字开头
#     3. 不能是关键字(python的函数名,if 等)
#   经验规则
#     小驼峰命名: userName 第一个单词的首字母小写其它的首字母大写
#     大驼峰命名: UserName 每个单词的首字母大写
#     匈牙利命名: user_name 每个单词用下划线分隔
#
# 4.数据类型:数据类型是计算机内部记录数据的方式和方法，数据采用不同的格式来存储
#     1.字符串(文字,文本) 关键字是 str
#         表达方式: 单引号 双引号  三个单引号或三个双引号(保留赋值时的格式) 转义符号\
#         字符串运算: 拼接(+) ,重复(*), 长度(len:字符长度)
#         访问:1.索引(位置)访问(单个字符访问) 从0开始
#             2.切片(范围访问范围)
#                 [开始索引]:[结束索引]:[步长]
#                 开始索引 默认值为0   结束索引 默认值为最后 步长 默认值为1
#                 开始索引:结束索引 此范围是左闭右开(包含开始不包含结束)
#                 可从后向前标位置: 开始索引 -1, 步长可负数(从右向左递进)
#         字符串的格式化:1.拼接(+)  2.format _{}  3.占位符(%s %d %.nf)
#         字符串的常用方法: count(子字符串)  replace(旧字符串,新字符串),
#                        strip(子字符串) find(子字符串) index(子字符串)
#     2.数值
#         整数 int, 小数 float, 布尔 bool
#         算术运算符: 四则运算 + - * /  特殊: 向下取整 //  取余(余数) %  幂运算 **
#         print(10//3,10//-3)
#         3.333 比此值小的最大的整数 3, -3.333 比此值小的最大的整数-4
#         类型转换: int(变量名) str(变量名) float(变量名),bool(变量名)
#
#     3.容器
